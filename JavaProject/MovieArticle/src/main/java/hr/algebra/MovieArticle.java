/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.algebra;

import hr.algebra.model.User;
import hr.algebra.view.DeleteDatabaseAndUploadRssParse;
import hr.algebra.view.UploadGenreActorDirector;
import hr.algebra.view.UploadMovie;
import javax.swing.JMenuItem;

/**
 *
 * @author windsten
 */
public class MovieArticle extends javax.swing.JFrame {
    
    private User loggedInUser;
    /**
     * Creates new form MovieArticle
     */
    public MovieArticle(User user) {
        this.loggedInUser = user;
        
        initComponents();
        initPanels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        mbMovieArticle = new javax.swing.JMenuBar();
        moNavigation = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        moNavigation.setText("Navigation");
        moNavigation.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                moNavigationMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        mbMovieArticle.add(moNavigation);

        setJMenuBar(mbMovieArticle);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moNavigationMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_moNavigationMenuKeyPressed

    }//GEN-LAST:event_moNavigationMenuKeyPressed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar mbMovieArticle;
    private javax.swing.JMenu moNavigation;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

    private static final String UPLOAD_MOVIE = "Upload movie";
    private static final String UPLOAD_ACTORDIRECTORGENRE = "Upload Actor, Genre and Directors";
    private static final String ADMIN_CONTROLS = "Admin controls";
    
    
    private void initPanels() {
        if ("User".equalsIgnoreCase(loggedInUser.getRoleName())) {
            tpContent.add(UPLOAD_MOVIE, new UploadMovie());
            tpContent.add(UPLOAD_ACTORDIRECTORGENRE, new UploadGenreActorDirector());
            
            JMenuItem uploadMovieItem = new JMenuItem(UPLOAD_MOVIE);
            uploadMovieItem.addActionListener(e -> {
                int index = tpContent.indexOfTab(UPLOAD_MOVIE);
                if (index != -1) {
                    tpContent.setSelectedIndex(index);
                }
            });

            JMenuItem uploadActorItem = new JMenuItem(UPLOAD_ACTORDIRECTORGENRE);
            uploadActorItem = new JMenuItem(UPLOAD_ACTORDIRECTORGENRE);
            uploadActorItem.addActionListener(e -> {
                int index = tpContent.indexOfTab(UPLOAD_ACTORDIRECTORGENRE);
                if (index != -1) {
                    tpContent.setSelectedIndex(index);
                }
            });

            moNavigation.add(uploadMovieItem);
            moNavigation.add(uploadActorItem);

        }
        if ("Admin".equalsIgnoreCase(loggedInUser.getRoleName())) {
            tpContent.add(UPLOAD_MOVIE, new UploadMovie());
            tpContent.add(UPLOAD_ACTORDIRECTORGENRE, new UploadGenreActorDirector());
            tpContent.add(ADMIN_CONTROLS, new DeleteDatabaseAndUploadRssParse());
            
            JMenuItem uploadMovieItem = new JMenuItem(UPLOAD_MOVIE);
            uploadMovieItem.addActionListener(e -> {
                int index = tpContent.indexOfTab(UPLOAD_MOVIE);
                if (index != -1) {
                    tpContent.setSelectedIndex(index);
                }
            });

            JMenuItem uploadActorItem = new JMenuItem(UPLOAD_ACTORDIRECTORGENRE);
            uploadActorItem.addActionListener(e -> {
                int index = tpContent.indexOfTab(UPLOAD_ACTORDIRECTORGENRE);
                if (index != -1) {
                    tpContent.setSelectedIndex(index);
                }
            });

            JMenuItem deleteDatabaseItem = new JMenuItem(ADMIN_CONTROLS);
            deleteDatabaseItem.addActionListener(e -> {
                int index = tpContent.indexOfTab(ADMIN_CONTROLS);
                if (index != -1) {
                    tpContent.setSelectedIndex(index);
                }
            });

            moNavigation.add(uploadMovieItem);
            moNavigation.add(uploadActorItem);
            moNavigation.add(deleteDatabaseItem);

        }
        
        
    }

}
