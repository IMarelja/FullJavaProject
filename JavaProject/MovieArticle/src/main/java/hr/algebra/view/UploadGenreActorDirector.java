/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.RepoFactory;
import hr.algebra.dal.Repository;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Genre;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.table.ActorTableModel;
import hr.algebra.view.model.table.DirectorTableModel;
import hr.algebra.view.model.table.GenreTableModel;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author windsten
 */
public class UploadGenreActorDirector extends javax.swing.JPanel {

    private List<JTextComponent> validationActorFields;
    private List<JTextComponent> validationDirectorFields;
    private List<JTextComponent> validationGenreFields;
    private List<JLabel> errorActorLabels;
    private List<JLabel> errorDirectorLabels;
    private List<JLabel> errorGenreLabels;
    
    private Repository repository;
    
    private ActorTableModel ActorModel;
    private DirectorTableModel DirectorModel;
    private GenreTableModel GenreModel;
    
    private Actor selectedActor;
    private Director selectedDirector;
    private Genre selectedGenre;
    
    
    /**
     * Creates new form UploadGenreActorDirector
     */
    public UploadGenreActorDirector() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbActor = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfFirstNameActor = new javax.swing.JTextField();
        tfLastNameActor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbGenre = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfNameGenre = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbDirector = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfFirstNameDirector = new javax.swing.JTextField();
        tfLastNameDirector = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        lbFirstNameActorError = new javax.swing.JLabel();
        lbLastNameActorError = new javax.swing.JLabel();
        lbNameGenreError = new javax.swing.JLabel();
        lbFirstNameDirectorError = new javax.swing.JLabel();
        lbLastNameDirectorError = new javax.swing.JLabel();
        btnAddActor = new javax.swing.JButton();
        btnUpdateActor = new javax.swing.JButton();
        btnDeleteActor = new javax.swing.JButton();
        btnUpdateGenre = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();
        btnAddGenre = new javax.swing.JButton();
        btnUpdateDirector = new javax.swing.JButton();
        btnDeleteDirector = new javax.swing.JButton();
        btnAddDirector = new javax.swing.JButton();

        tbActor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbActor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbActorMouseClicked(evt);
            }
        });
        tbActor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbActorKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbActor);

        jLabel1.setText("Actor");

        jLabel2.setText("Firstname");

        jLabel3.setText("Lastname");

        tbGenre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbGenre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbGenreMouseClicked(evt);
            }
        });
        tbGenre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbGenreKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbGenre);

        jLabel4.setText("Genre");

        jLabel5.setText("Name");

        tbDirector.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbDirector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDirectorMouseClicked(evt);
            }
        });
        tbDirector.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbDirectorKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tbDirector);

        jLabel7.setText("Director");

        jLabel8.setText("Firstname");

        jLabel9.setText("Lastname");

        lbFirstNameActorError.setForeground(new java.awt.Color(255, 0, 51));
        lbFirstNameActorError.setText("X");

        lbLastNameActorError.setForeground(new java.awt.Color(255, 0, 51));
        lbLastNameActorError.setText("X");

        lbNameGenreError.setForeground(new java.awt.Color(255, 0, 51));
        lbNameGenreError.setText("X");

        lbFirstNameDirectorError.setForeground(new java.awt.Color(255, 0, 51));
        lbFirstNameDirectorError.setText("X");

        lbLastNameDirectorError.setForeground(new java.awt.Color(255, 0, 51));
        lbLastNameDirectorError.setText("X");

        btnAddActor.setText("Add");
        btnAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorActionPerformed(evt);
            }
        });

        btnUpdateActor.setText("Update");
        btnUpdateActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActorActionPerformed(evt);
            }
        });

        btnDeleteActor.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteActor.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteActor.setText("Delete");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        btnUpdateGenre.setText("Update");
        btnUpdateGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGenreActionPerformed(evt);
            }
        });

        btnDeleteGenre.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteGenre.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteGenre.setText("Delete");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        btnAddGenre.setText("Add");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnUpdateDirector.setText("Update");
        btnUpdateDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDirectorActionPerformed(evt);
            }
        });

        btnDeleteDirector.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteDirector.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteDirector.setText("Delete");
        btnDeleteDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDirectorActionPerformed(evt);
            }
        });

        btnAddDirector.setText("Add");
        btnAddDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfFirstNameActor)
                            .addComponent(tfLastNameActor, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbLastNameActorError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbFirstNameActorError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddActor)
                        .addGap(32, 32, 32)
                        .addComponent(btnUpdateActor)
                        .addGap(26, 26, 26)
                        .addComponent(btnDeleteActor)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddGenre)
                        .addGap(26, 26, 26)
                        .addComponent(btnUpdateGenre)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteGenre))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addComponent(tfNameGenre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbNameGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfFirstNameDirector)
                            .addComponent(tfLastNameDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbFirstNameDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbLastNameDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAddDirector)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdateDirector)
                            .addGap(26, 26, 26)
                            .addComponent(btnDeleteDirector))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(tfNameGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lbNameGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddGenre, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnDeleteGenre)
                                .addComponent(btnUpdateGenre)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lbFirstNameDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfFirstNameDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfLastNameDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(lbLastNameDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnAddDirector)
                                .addComponent(btnUpdateDirector))
                            .addComponent(btnDeleteDirector, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfFirstNameActor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbFirstNameActorError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfLastNameActor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(lbLastNameActorError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(btnAddActor))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnDeleteActor)
                                    .addComponent(btnUpdateActor))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorActionPerformed
        if (!formActorValid()) {
            return;
        }
        try {

            Actor actor = new Actor(
                tfFirstNameActor.getText().trim(),
                tfLastNameActor.getText().trim()
            );
            
            repository.createActor(actor);

            ActorModel.setActors(repository.readActors());

            clearActorForm();
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,"An unexpected error occurred!\n" + e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActorActionPerformed

    private void tbActorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbActorMouseClicked
        selectActor();
    }//GEN-LAST:event_tbActorMouseClicked

    private void tbActorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbActorKeyReleased
        selectActor();
    }//GEN-LAST:event_tbActorKeyReleased

    private void tbGenreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbGenreKeyReleased
        selectGenre();
    }//GEN-LAST:event_tbGenreKeyReleased

    private void tbGenreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbGenreMouseClicked
        selectGenre();
    }//GEN-LAST:event_tbGenreMouseClicked

    private void tbDirectorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbDirectorKeyReleased
        selectDirector();
    }//GEN-LAST:event_tbDirectorKeyReleased

    private void tbDirectorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDirectorMouseClicked
        selectDirector();
    }//GEN-LAST:event_tbDirectorMouseClicked

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        if (!formGenreValid()) {
            return;
        }
        try {

            Genre genre = new Genre(
                tfNameGenre.getText().trim()
            );
            
            repository.createGenre(genre);

            GenreModel.setGenres(repository.readGenres());

            clearGenreForm();
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,"An unexpected error occurred!\n" + e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnAddDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirectorActionPerformed
        if (!formDirectorValid()) {
            return;
        }
        try {

            Director director = new Director(
                tfFirstNameDirector.getText().trim(),
                tfLastNameDirector.getText().trim()
            );
            
            repository.createDirector(director);

            DirectorModel.setDirectors(repository.readDirectors());

            clearDirectorForm();
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,"An unexpected error occurred!\n" + e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddDirectorActionPerformed

    private void btnUpdateActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActorActionPerformed
        if (selectedActor == null) {
            MessageUtils.showInformationMessage("Info", "Plese select article");
            return;
        }
        if (!formActorValid()) {
            return;
        }
        try {

            selectedActor.setFirstName(tfFirstNameActor.getText().trim());
            selectedActor.setLastName(tfLastNameActor.getText().trim());

            repository.updateActor(selectedActor.getId(), selectedActor);

            ActorModel.setActors(repository.readActors());

            clearActorForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateActorActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        if (selectedActor == null) {
            MessageUtils.showInformationMessage("Info", "Plese select article");
            return;
        }

        try {

            repository.deleteActor(selectedActor.getId());

            ActorModel.setActors(repository.readActors());

            clearActorForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnUpdateGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGenreActionPerformed
        if (selectedGenre == null) {
            MessageUtils.showInformationMessage("Info", "Plese select article");
            return;
        }
        if (!formGenreValid()) {
            return;
        }
        try {

            selectedGenre.setName(tfNameGenre.getText().trim());

            repository.updateGenre(selectedGenre.getId(), selectedGenre);

            GenreModel.setGenres(repository.readGenres());

            clearGenreForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateGenreActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        if (selectedGenre == null) {
            MessageUtils.showInformationMessage("Info", "Plese select article");
            return;
        }

        try {

            repository.deleteGenre(selectedGenre.getId());

            GenreModel.setGenres(repository.readGenres());

            clearGenreForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void btnUpdateDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDirectorActionPerformed
        if (selectedDirector == null) {
            MessageUtils.showInformationMessage("Info", "Plese select article");
            return;
        }
        if (!formDirectorValid()) {
            return;
        }
        try {

            selectedDirector.setFirstName(tfFirstNameDirector.getText().trim());
            selectedDirector.setLastName(tfLastNameDirector.getText().trim());

            repository.updateDirector(selectedDirector.getId(), selectedDirector);

            DirectorModel.setDirectors(repository.readDirectors());

            clearDirectorForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateDirectorActionPerformed

    private void btnDeleteDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectorActionPerformed
        if (selectedDirector == null) {
            MessageUtils.showInformationMessage("Info", "Plese select article");
            return;
        }

        try {

            repository.deleteDirector(selectedDirector.getId());

            DirectorModel.setDirectors(repository.readDirectors());

            clearDirectorForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteDirectorActionPerformed


    private void initValidation() {
        validationActorFields = Arrays.asList(
                tfFirstNameActor,
                tfLastNameActor
        );
        validationGenreFields = Arrays.asList(
                tfNameGenre
        );
        validationDirectorFields = Arrays.asList(
                tfFirstNameDirector,
                tfLastNameDirector
        );
        errorActorLabels = Arrays.asList(
                lbFirstNameActorError,
                lbLastNameActorError
        );
        errorGenreLabels = Arrays.asList(
                lbNameGenreError
        );
        errorDirectorLabels = Arrays.asList(
                lbFirstNameDirectorError,
                lbLastNameDirectorError
        );
    }
    
    private void init() {
        try {
            initValidation();
            hideAllErrors();
            initRepository();
            initAllTable();
        } catch (Exception ex) {
            Logger.getLogger(UploadMovie.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }
    
    private void initRepository() throws Exception {
        repository = RepoFactory.getRepository();
    }

    private void initAllTable() throws Exception {
        tbActor.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbActor.setAutoCreateRowSorter(true);
        tbActor.setRowHeight(25);
        ActorModel = new ActorTableModel(repository.readActors());
        tbActor.setModel(ActorModel);
        
        tbDirector.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbDirector.setAutoCreateRowSorter(true);
        tbDirector.setRowHeight(25);
        DirectorModel = new DirectorTableModel(repository.readDirectors());
        tbDirector.setModel(DirectorModel);
        
        tbGenre.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbGenre.setAutoCreateRowSorter(true);
        tbGenre.setRowHeight(25);
        GenreModel = new GenreTableModel(repository.readGenres());
        tbGenre.setModel(GenreModel);
    }
    
    private void hideAllErrors() {
        errorActorLabels.forEach(e -> e.setVisible(false));
        errorDirectorLabels.forEach(e -> e.setVisible(false));
        errorGenreLabels.forEach(e -> e.setVisible(false));
    }
    
    private void hideActorErrors() {
        errorActorLabels.forEach(e -> e.setVisible(false));
    }
    
    private void hideDirectorErrors() {
        errorDirectorLabels.forEach(e -> e.setVisible(false));
    }
    
    private void hideGenreErrors() {
        errorGenreLabels.forEach(e -> e.setVisible(false));
    }
    
    private void clearActorForm() {
        hideActorErrors();
        validationActorFields.forEach(e -> e.setText(""));
        selectedActor = null;
    }
    
    private void clearGenreForm() {
        hideGenreErrors();
        validationGenreFields.forEach(e -> e.setText(""));
        selectedGenre = null;
    }
    
    private void clearDirectorForm() {
        hideDirectorErrors();
        validationDirectorFields.forEach(e -> e.setText(""));
        selectedDirector = null;
    }
    
    private boolean formActorValid() {
        hideActorErrors();
        boolean ok = true;

        for (int i = 0; i < validationActorFields.size(); i++) {
            ok &= !validationActorFields.get(i).getText().trim().isEmpty();
            errorActorLabels.get(i).setVisible(validationActorFields.get(i).getText().trim().isEmpty());

        }
        return ok;
    }
    
    private boolean formGenreValid() {
        hideGenreErrors();
        boolean ok = true;

        for (int i = 0; i < validationGenreFields.size(); i++) {
            ok &= !validationGenreFields.get(i).getText().trim().isEmpty();
            errorGenreLabels.get(i).setVisible(validationGenreFields.get(i).getText().trim().isEmpty());

        }
        return ok;
    }
    
    private boolean formDirectorValid() {
        hideDirectorErrors();
        boolean ok = true;

        for (int i = 0; i < validationDirectorFields.size(); i++) {
            ok &= !validationDirectorFields.get(i).getText().trim().isEmpty();
            errorDirectorLabels.get(i).setVisible(validationDirectorFields.get(i).getText().trim().isEmpty());

        }
        return ok;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddActor;
    private javax.swing.JButton btnAddDirector;
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteDirector;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnUpdateActor;
    private javax.swing.JButton btnUpdateDirector;
    private javax.swing.JButton btnUpdateGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbFirstNameActorError;
    private javax.swing.JLabel lbFirstNameDirectorError;
    private javax.swing.JLabel lbLastNameActorError;
    private javax.swing.JLabel lbLastNameDirectorError;
    private javax.swing.JLabel lbNameGenreError;
    private javax.swing.JTable tbActor;
    private javax.swing.JTable tbDirector;
    private javax.swing.JTable tbGenre;
    private javax.swing.JTextField tfFirstNameActor;
    private javax.swing.JTextField tfFirstNameDirector;
    private javax.swing.JTextField tfLastNameActor;
    private javax.swing.JTextField tfLastNameDirector;
    private javax.swing.JTextField tfNameGenre;
    // End of variables declaration//GEN-END:variables

    private void selectActor() {
        int selectedRow = tbActor.getSelectedRow();
        int rowIndex = tbActor.convertRowIndexToModel(selectedRow);
        int id = (int) tbActor.getValueAt(rowIndex, 0);
        try {
            Optional<Actor> opt = repository.readActor(id);
            if (opt.isPresent()) {
                showActor(opt.get());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void selectGenre() {
        int selectedRow = tbGenre.getSelectedRow();
        int rowIndex = tbGenre.convertRowIndexToModel(selectedRow);
        int id = (int) tbGenre.getValueAt(rowIndex, 0);
        try {
            Optional<Genre> opt = repository.readGenre(id);
            if (opt.isPresent()) {
                showGenre(opt.get());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void selectDirector() {
        int selectedRow = tbDirector.getSelectedRow();
        int rowIndex = tbDirector.convertRowIndexToModel(selectedRow);
        int id = (int) tbDirector.getValueAt(rowIndex, 0);
        try {
            Optional<Director> opt = repository.readDirector(id);
            if (opt.isPresent()) {
                showDirector(opt.get());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showActor(Actor actor) {
        selectedActor = actor;

        tfFirstNameActor.setText(selectedActor.getFirstName());
        tfLastNameActor.setText(selectedActor.getLastName());
    }

    private void showGenre(Genre genre) {
        selectedGenre = genre;

        tfNameGenre.setText(selectedGenre.getName());
    }

    private void showDirector(Director director) {
        selectedDirector = director;

        tfFirstNameDirector.setText(selectedDirector.getFirstName());
        tfLastNameDirector.setText(selectedDirector.getLastName());
    }
}
